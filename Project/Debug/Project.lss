
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000ba4  00000c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080011a  0080011a  00000c52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001131  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c8  00000000  00000000  00001e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf9  00000000  00000000  00002865  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00003560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000596  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e6c  00000000  00000000  00003cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004b2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3a d4       	rcall	.+2164   	; 0x938 <main>
  c4:	6d c5       	rjmp	.+2778   	; 0xba0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
  ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
  f0:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
  f4:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
  f8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
  fc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 100:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <__data_end+0x2>
 104:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <__data_end+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 122:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 126:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 12a:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <__data_end+0x2>
 12e:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <__data_end+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 13c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 140:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <__data_end+0x2>
 144:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 15a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 15e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 162:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 166:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 16a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 16e:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <__data_end+0x2>
 172:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <__data_end+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
 18c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 190:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 194:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <__data_end>
 19c:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <__data_end+0x1>
 1a0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end+0x2>
 1a4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x3>
 1a8:	08 95       	ret

000001aa <startMenu>:
}

enum COLORS{red, green, blue, none} previous;

void startMenu(){
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
	bluePins = 0;
 1ae:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <bluePins>
	unsigned i = rand() % 4;
 1b2:	8b d4       	rcall	.+2326   	; 0xaca <rand>
 1b4:	83 70       	andi	r24, 0x03	; 3
 1b6:	90 78       	andi	r25, 0x80	; 128
 1b8:	99 23       	and	r25, r25
 1ba:	24 f4       	brge	.+8      	; 0x1c4 <startMenu+0x1a>
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	8c 6f       	ori	r24, 0xFC	; 252
 1c0:	9f 6f       	ori	r25, 0xFF	; 255
	unsigned j = rand() % 4 + i;
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	ec 01       	movw	r28, r24
 1c6:	81 d4       	rcall	.+2306   	; 0xaca <rand>
 1c8:	83 70       	andi	r24, 0x03	; 3
 1ca:	90 78       	andi	r25, 0x80	; 128
 1cc:	99 23       	and	r25, r25
 1ce:	24 f4       	brge	.+8      	; 0x1d8 <startMenu+0x2e>
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	8c 6f       	ori	r24, 0xFC	; 252
 1d4:	9f 6f       	ori	r25, 0xFF	; 255
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	8c 0f       	add	r24, r28
 1da:	9d 1f       	adc	r25, r29
 1dc:	e0 e1       	ldi	r30, 0x10	; 16
	for (unsigned k = 0; k <= i; ++k){
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	20 e0       	ldi	r18, 0x00	; 0
		greenPins[k] = 0;
 1e2:	30 e0       	ldi	r19, 0x00	; 0

void startMenu(){
	bluePins = 0;
	unsigned i = rand() % 4;
	unsigned j = rand() % 4 + i;
	for (unsigned k = 0; k <= i; ++k){
 1e4:	11 92       	st	Z+, r1
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	c2 17       	cp	r28, r18
 1ec:	d3 07       	cpc	r29, r19
 1ee:	d0 f7       	brcc	.-12     	; 0x1e4 <startMenu+0x3a>
 1f0:	e8 e0       	ldi	r30, 0x08	; 8
 1f2:	f1 e0       	ldi	r31, 0x01	; 1
 1f4:	20 e0       	ldi	r18, 0x00	; 0
		greenPins[k] = 0;
	}
	for (unsigned k = 0; k <= j; ++k){
		redPins[k] = 0;
 1f6:	30 e0       	ldi	r19, 0x00	; 0
	unsigned i = rand() % 4;
	unsigned j = rand() % 4 + i;
	for (unsigned k = 0; k <= i; ++k){
		greenPins[k] = 0;
	}
	for (unsigned k = 0; k <= j; ++k){
 1f8:	11 92       	st	Z+, r1
 1fa:	2f 5f       	subi	r18, 0xFF	; 255
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	82 17       	cp	r24, r18
 200:	93 07       	cpc	r25, r19
		redPins[k] = 0;
	}
}
 202:	d0 f7       	brcc	.-12     	; 0x1f8 <startMenu+0x4e>
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <updateShiftGreen>:
		update = (update >> 1);
	}
	PORTA = 0x0A;
}

void updateShiftGreen(unsigned char update){
 20a:	cf 93       	push	r28
 20c:	c8 2f       	mov	r28, r24
	unsigned char b = 0x00;
	if (update == 255){
 20e:	8f 3f       	cpi	r24, 0xFF	; 255
 210:	61 f4       	brne	.+24     	; 0x22a <updateShiftGreen+0x20>
		PORTC = 0x00;
 212:	18 b8       	out	0x08, r1	; 8
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	90 e0       	ldi	r25, 0x00	; 0
		for (int i = 0; i < 8; ++i){
			b = 0x09;
			PORTC = b;
 218:	39 e0       	ldi	r19, 0x09	; 9
			PORTC = 0x0C;
 21a:	2c e0       	ldi	r18, 0x0C	; 12
	unsigned char b = 0x00;
	if (update == 255){
		PORTC = 0x00;
		for (int i = 0; i < 8; ++i){
			b = 0x09;
			PORTC = b;
 21c:	38 b9       	out	0x08, r19	; 8
			PORTC = 0x0C;
 21e:	28 b9       	out	0x08, r18	; 8
 220:	01 97       	sbiw	r24, 0x01	; 1

void updateShiftGreen(unsigned char update){
	unsigned char b = 0x00;
	if (update == 255){
		PORTC = 0x00;
		for (int i = 0; i < 8; ++i){
 222:	e1 f7       	brne	.-8      	; 0x21c <updateShiftGreen+0x12>
			b = 0x09;
			PORTC = b;
			PORTC = 0x0C;
		}
		PORTC = 0x0A;
 224:	8a e0       	ldi	r24, 0x0A	; 10
 226:	88 b9       	out	0x08, r24	; 8
		return;
 228:	1d c0       	rjmp	.+58     	; 0x264 <updateShiftGreen+0x5a>
	}
	if (previous == blue){
 22a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <previous>
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	19 f4       	brne	.+6      	; 0x238 <updateShiftGreen+0x2e>
		updateShiftBlue(255);
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	47 d0       	rcall	.+142    	; 0x2c4 <updateShiftBlue>
 236:	04 c0       	rjmp	.+8      	; 0x240 <updateShiftGreen+0x36>
	}
	else if (previous == red){
 238:	81 11       	cpse	r24, r1
		updateShiftRed(255);
 23a:	02 c0       	rjmp	.+4      	; 0x240 <updateShiftGreen+0x36>
 23c:	8f ef       	ldi	r24, 0xFF	; 255
	}
	previous = green;
 23e:	14 d0       	rcall	.+40     	; 0x268 <updateShiftRed>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <previous>
	PORTC = 0x00;
 246:	18 b8       	out	0x08, r1	; 8
 248:	28 e0       	ldi	r18, 0x08	; 8
	for (int i = 0; i < 8; ++i){
		b = update & 0x01;
		b = b | 0x08;
		PORTC = b;
		PORTC = 0x0C;
 24a:	30 e0       	ldi	r19, 0x00	; 0
		updateShiftRed(255);
	}
	previous = green;
	PORTC = 0x00;
	for (int i = 0; i < 8; ++i){
		b = update & 0x01;
 24c:	9c e0       	ldi	r25, 0x0C	; 12
 24e:	8c 2f       	mov	r24, r28
		b = b | 0x08;
 250:	81 70       	andi	r24, 0x01	; 1
		PORTC = b;
 252:	88 60       	ori	r24, 0x08	; 8
		PORTC = 0x0C;
 254:	88 b9       	out	0x08, r24	; 8
		update = (update >> 1);
 256:	98 b9       	out	0x08, r25	; 8
 258:	c6 95       	lsr	r28
 25a:	21 50       	subi	r18, 0x01	; 1
	else if (previous == red){
		updateShiftRed(255);
	}
	previous = green;
	PORTC = 0x00;
	for (int i = 0; i < 8; ++i){
 25c:	31 09       	sbc	r19, r1
		b = b | 0x08;
		PORTC = b;
		PORTC = 0x0C;
		update = (update >> 1);
	}
	PORTC = 0x0A;
 25e:	b9 f7       	brne	.-18     	; 0x24e <updateShiftGreen+0x44>
 260:	8a e0       	ldi	r24, 0x0A	; 10
}
 262:	88 b9       	out	0x08, r24	; 8
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <updateShiftRed>:
	for (unsigned k = 0; k <= j; ++k){
		redPins[k] = 0;
	}
}

void updateShiftRed(unsigned char update){
 268:	cf 93       	push	r28
 26a:	c8 2f       	mov	r28, r24
	unsigned char b = 0x00;
	if (update == 255){
 26c:	8f 3f       	cpi	r24, 0xFF	; 255
 26e:	61 f4       	brne	.+24     	; 0x288 <updateShiftRed+0x20>
		PORTB = 0x00;
 270:	15 b8       	out	0x05, r1	; 5
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	90 e0       	ldi	r25, 0x00	; 0
		for (int i = 0; i < 8; ++i){
			b = 0x09;
			PORTB = b;
 276:	39 e0       	ldi	r19, 0x09	; 9
			PORTB = 0x0C;
 278:	2c e0       	ldi	r18, 0x0C	; 12
	unsigned char b = 0x00;
	if (update == 255){
		PORTB = 0x00;
		for (int i = 0; i < 8; ++i){
			b = 0x09;
			PORTB = b;
 27a:	35 b9       	out	0x05, r19	; 5
			PORTB = 0x0C;
 27c:	25 b9       	out	0x05, r18	; 5
 27e:	01 97       	sbiw	r24, 0x01	; 1

void updateShiftRed(unsigned char update){
	unsigned char b = 0x00;
	if (update == 255){
		PORTB = 0x00;
		for (int i = 0; i < 8; ++i){
 280:	e1 f7       	brne	.-8      	; 0x27a <updateShiftRed+0x12>
			b = 0x09;
			PORTB = b;
			PORTB = 0x0C;
		}
		PORTB = 0x0A;
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	85 b9       	out	0x05, r24	; 5
		return;
 286:	1c c0       	rjmp	.+56     	; 0x2c0 <updateShiftRed+0x58>
	}
	if (previous == blue){
 288:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <previous>
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	19 f4       	brne	.+6      	; 0x296 <updateShiftRed+0x2e>
		updateShiftBlue(255);
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	18 d0       	rcall	.+48     	; 0x2c4 <updateShiftBlue>
 294:	04 c0       	rjmp	.+8      	; 0x29e <updateShiftRed+0x36>
	}
	else if (previous == green){
 296:	81 30       	cpi	r24, 0x01	; 1
		updateShiftGreen(255);
 298:	11 f4       	brne	.+4      	; 0x29e <updateShiftRed+0x36>
 29a:	8f ef       	ldi	r24, 0xFF	; 255
	}
	previous = red;
 29c:	b6 df       	rcall	.-148    	; 0x20a <updateShiftGreen>
 29e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <previous>
	PORTB = 0x00;
 2a2:	15 b8       	out	0x05, r1	; 5
 2a4:	28 e0       	ldi	r18, 0x08	; 8
	for (int i = 0; i < 8; ++i){
		b = update & 0x01;
		b = b | 0x08;
		PORTB = b;
		PORTB = 0x0C;
 2a6:	30 e0       	ldi	r19, 0x00	; 0
		updateShiftGreen(255);
	}
	previous = red;
	PORTB = 0x00;
	for (int i = 0; i < 8; ++i){
		b = update & 0x01;
 2a8:	9c e0       	ldi	r25, 0x0C	; 12
 2aa:	8c 2f       	mov	r24, r28
		b = b | 0x08;
 2ac:	81 70       	andi	r24, 0x01	; 1
		PORTB = b;
 2ae:	88 60       	ori	r24, 0x08	; 8
		PORTB = 0x0C;
 2b0:	85 b9       	out	0x05, r24	; 5
		update = (update >> 1);
 2b2:	95 b9       	out	0x05, r25	; 5
 2b4:	c6 95       	lsr	r28
 2b6:	21 50       	subi	r18, 0x01	; 1
	else if (previous == green){
		updateShiftGreen(255);
	}
	previous = red;
	PORTB = 0x00;
	for (int i = 0; i < 8; ++i){
 2b8:	31 09       	sbc	r19, r1
		b = b | 0x08;
		PORTB = b;
		PORTB = 0x0C;
		update = (update >> 1);
	}
	PORTB = 0x0A;
 2ba:	b9 f7       	brne	.-18     	; 0x2aa <updateShiftRed+0x42>
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
}
 2be:	85 b9       	out	0x05, r24	; 5
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <updateShiftBlue>:

void updateShiftBlue(unsigned char update){
 2c4:	cf 93       	push	r28
 2c6:	c8 2f       	mov	r28, r24
	PORTA = 0x01;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	82 b9       	out	0x02, r24	; 2
	unsigned char b = 0x00;
	if (update == 255){
 2cc:	cf 3f       	cpi	r28, 0xFF	; 255
 2ce:	61 f4       	brne	.+24     	; 0x2e8 <updateShiftBlue+0x24>
		PORTA = 0x00;
 2d0:	12 b8       	out	0x02, r1	; 2
 2d2:	88 e0       	ldi	r24, 0x08	; 8
 2d4:	90 e0       	ldi	r25, 0x00	; 0
		for (int i = 0; i < 8; ++i){
			b = 0x09;
			PORTA = b;
 2d6:	39 e0       	ldi	r19, 0x09	; 9
			PORTA = 0x0C;
 2d8:	2c e0       	ldi	r18, 0x0C	; 12
	unsigned char b = 0x00;
	if (update == 255){
		PORTA = 0x00;
		for (int i = 0; i < 8; ++i){
			b = 0x09;
			PORTA = b;
 2da:	32 b9       	out	0x02, r19	; 2
			PORTA = 0x0C;
 2dc:	22 b9       	out	0x02, r18	; 2
 2de:	01 97       	sbiw	r24, 0x01	; 1
void updateShiftBlue(unsigned char update){
	PORTA = 0x01;
	unsigned char b = 0x00;
	if (update == 255){
		PORTA = 0x00;
		for (int i = 0; i < 8; ++i){
 2e0:	e1 f7       	brne	.-8      	; 0x2da <updateShiftBlue+0x16>
			b = 0x09;
			PORTA = b;
			PORTA = 0x0C;
		}
		PORTA = 0x0A;
 2e2:	8a e0       	ldi	r24, 0x0A	; 10
 2e4:	82 b9       	out	0x02, r24	; 2
		return;
 2e6:	1d c0       	rjmp	.+58     	; 0x322 <updateShiftBlue+0x5e>
	}
	if (previous == green){
 2e8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <previous>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <updateShiftBlue+0x32>
		updateShiftGreen(255);
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	8b df       	rcall	.-234    	; 0x20a <updateShiftGreen>
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <updateShiftBlue+0x3a>
	}
	else if (previous == red){
 2f6:	81 11       	cpse	r24, r1
		updateShiftRed(255);
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <updateShiftBlue+0x3a>
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
	}
	previous = blue;
 2fc:	b5 df       	rcall	.-150    	; 0x268 <updateShiftRed>
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <previous>
	PORTA = 0x00;
 304:	12 b8       	out	0x02, r1	; 2
 306:	28 e0       	ldi	r18, 0x08	; 8
	for (int i = 0; i < 8; ++i){
		b = update & 0x01;
		b = b | 0x08;
		PORTA = b;
		PORTA = 0x0C;
 308:	30 e0       	ldi	r19, 0x00	; 0
		updateShiftRed(255);
	}
	previous = blue;
	PORTA = 0x00;
	for (int i = 0; i < 8; ++i){
		b = update & 0x01;
 30a:	9c e0       	ldi	r25, 0x0C	; 12
 30c:	8c 2f       	mov	r24, r28
		b = b | 0x08;
 30e:	81 70       	andi	r24, 0x01	; 1
		PORTA = b;
 310:	88 60       	ori	r24, 0x08	; 8
		PORTA = 0x0C;
 312:	82 b9       	out	0x02, r24	; 2
		update = (update >> 1);
 314:	92 b9       	out	0x02, r25	; 2
 316:	c6 95       	lsr	r28
 318:	21 50       	subi	r18, 0x01	; 1
	else if (previous == red){
		updateShiftRed(255);
	}
	previous = blue;
	PORTA = 0x00;
	for (int i = 0; i < 8; ++i){
 31a:	31 09       	sbc	r19, r1
		b = b | 0x08;
		PORTA = b;
		PORTA = 0x0C;
		update = (update >> 1);
	}
	PORTA = 0x0A;
 31c:	b9 f7       	brne	.-18     	; 0x30c <updateShiftBlue+0x48>
 31e:	8a e0       	ldi	r24, 0x0A	; 10
}
 320:	82 b9       	out	0x02, r24	; 2
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <updateGame>:


void updateGame(){ //will update locations and locate any collisions
	unsigned char points = 0;
	for (unsigned i = 0; i < 8; ++i){
		unsigned char g = ~greenPins[i];
 326:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <greenPins>
 32a:	90 95       	com	r25
		unsigned char r = ~redPins[i];
 32c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <redPins>
 330:	80 95       	com	r24
		if ((r & 0x80) == 0x80){
 332:	28 2f       	mov	r18, r24
 334:	52 f4       	brpl	.+20     	; 0x34a <updateGame+0x24>
 336:	06 c0       	rjmp	.+12     	; 0x344 <updateGame+0x1e>


void updateGame(){ //will update locations and locate any collisions
	unsigned char points = 0;
	for (unsigned i = 0; i < 8; ++i){
		unsigned char g = ~greenPins[i];
 338:	9c 91       	ld	r25, X
 33a:	90 95       	com	r25
		unsigned char r = ~redPins[i];
 33c:	80 81       	ld	r24, Z
 33e:	80 95       	com	r24
		if ((r & 0x80) == 0x80){
 340:	28 2f       	mov	r18, r24
 342:	52 f4       	brpl	.+20     	; 0x358 <updateGame+0x32>
			loser = on;
 344:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <loser>
			return;
 348:	08 95       	ret
 34a:	e8 e0       	ldi	r30, 0x08	; 8
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	a0 e1       	ldi	r26, 0x10	; 16
 350:	b1 e0       	ldi	r27, 0x01	; 1
 352:	40 e1       	ldi	r20, 0x10	; 16
 354:	51 e0       	ldi	r21, 0x01	; 1
void updateGame(){ //will update locations and locate any collisions
	unsigned char points = 0;
	for (unsigned i = 0; i < 8; ++i){
		unsigned char g = ~greenPins[i];
		unsigned char r = ~redPins[i];
		if ((r & 0x80) == 0x80){
 356:	30 e0       	ldi	r19, 0x00	; 0
			loser = on;
			return;
		}
		else if ((r & g)){
 358:	69 2f       	mov	r22, r25
 35a:	68 23       	and	r22, r24
 35c:	31 f0       	breq	.+12     	; 0x36a <updateGame+0x44>
			unsigned char temp = r;
			r = r & ~g;
 35e:	89 2f       	mov	r24, r25
 360:	80 95       	com	r24
 362:	82 23       	and	r24, r18
			g = g & ~temp;
 364:	20 95       	com	r18
 366:	92 23       	and	r25, r18
			points = points + 1;
 368:	3f 5f       	subi	r19, 0xFF	; 255
		}
		g = (g >> 1);
 36a:	96 95       	lsr	r25
		if ((r & g)){
 36c:	28 2f       	mov	r18, r24
 36e:	29 23       	and	r18, r25
 370:	39 f0       	breq	.+14     	; 0x380 <updateGame+0x5a>
			unsigned char temp = r;
			r = r & ~g;
 372:	28 2f       	mov	r18, r24
 374:	69 2f       	mov	r22, r25
 376:	60 95       	com	r22
 378:	86 23       	and	r24, r22
			g = g & ~temp;
 37a:	20 95       	com	r18
 37c:	92 23       	and	r25, r18
			points = points + 1;
 37e:	3f 5f       	subi	r19, 0xFF	; 255
		}
		r = (r << 1);
		redPins[i] = ~r;
 380:	88 0f       	add	r24, r24
 382:	80 95       	com	r24
 384:	81 93       	st	Z+, r24
		greenPins[i] = ~g;
 386:	90 95       	com	r25
 388:	9d 93       	st	X+, r25
}


void updateGame(){ //will update locations and locate any collisions
	unsigned char points = 0;
	for (unsigned i = 0; i < 8; ++i){
 38a:	e4 17       	cp	r30, r20
 38c:	f5 07       	cpc	r31, r21
 38e:	a1 f6       	brne	.-88     	; 0x338 <updateGame+0x12>
		}
		r = (r << 1);
		redPins[i] = ~r;
		greenPins[i] = ~g;
	}
	PORTC = (points << 3) | 0x0A;
 390:	33 0f       	add	r19, r19
 392:	33 0f       	add	r19, r19
 394:	33 0f       	add	r19, r19
 396:	3a 60       	ori	r19, 0x0A	; 10
 398:	38 b9       	out	0x08, r19	; 8
	while(!TimerFlag);
 39a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 39e:	88 23       	and	r24, r24
 3a0:	e1 f3       	breq	.-8      	; 0x39a <updateGame+0x74>
	TimerFlag = 0;
 3a2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
	PORTC = 0x0A;
 3a6:	8a e0       	ldi	r24, 0x0A	; 10
 3a8:	88 b9       	out	0x08, r24	; 8
 3aa:	08 95       	ret

000003ac <spawnEnemy>:
}

void spawnEnemy(){
 3ac:	8e d3       	rcall	.+1820   	; 0xaca <rand>
 3ae:	87 70       	andi	r24, 0x07	; 7
 3b0:	90 78       	andi	r25, 0x80	; 128
 3b2:	99 23       	and	r25, r25
 3b4:	24 f4       	brge	.+8      	; 0x3be <spawnEnemy+0x12>
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	88 6f       	ori	r24, 0xF8	; 248
 3ba:	9f 6f       	ori	r25, 0xFF	; 255
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	48 2f       	mov	r20, r24
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f9 01       	movw	r30, r18
 3c6:	e8 5f       	subi	r30, 0xF8	; 248
 3c8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ca:	90 81       	ld	r25, Z
 3cc:	90 95       	com	r25
 3ce:	91 fd       	sbrc	r25, 1
 3d0:	06 c0       	rjmp	.+12     	; 0x3de <spawnEnemy+0x32>
 3d2:	f9 01       	movw	r30, r18
 3d4:	e8 5f       	subi	r30, 0xF8	; 248
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	91 60       	ori	r25, 0x01	; 1
 3da:	90 95       	com	r25
 3dc:	90 83       	st	Z, r25
 3de:	8f 5f       	subi	r24, 0xFF	; 255
 3e0:	48 17       	cp	r20, r24
 3e2:	70 f7       	brcc	.-36     	; 0x3c0 <spawnEnemy+0x14>
 3e4:	08 95       	ret

000003e6 <spawnEnemy2>:
 3e6:	71 d3       	rcall	.+1762   	; 0xaca <rand>
 3e8:	67 e0       	ldi	r22, 0x07	; 7
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	00 d3       	rcall	.+1536   	; 0x9ee <__divmodhi4>
 3ee:	28 2f       	mov	r18, r24
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	82 17       	cp	r24, r18
 3f4:	90 f0       	brcs	.+36     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f6:	42 2f       	mov	r20, r18
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	fa 01       	movw	r30, r20
 3fc:	e8 5f       	subi	r30, 0xF8	; 248
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	90 81       	ld	r25, Z
 402:	90 95       	com	r25
 404:	91 fd       	sbrc	r25, 1
 406:	06 c0       	rjmp	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 408:	fa 01       	movw	r30, r20
 40a:	e8 5f       	subi	r30, 0xF8	; 248
 40c:	fe 4f       	sbci	r31, 0xFE	; 254
 40e:	91 60       	ori	r25, 0x01	; 1
 410:	90 95       	com	r25
 412:	90 83       	st	Z, r25
 414:	2f 5f       	subi	r18, 0xFF	; 255
 416:	82 17       	cp	r24, r18
 418:	70 f7       	brcc	.-36     	; 0x3f6 <spawnEnemy2+0x10>
 41a:	08 95       	ret

0000041c <updatePlayer>:
 41c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <newBlue>
 420:	88 23       	and	r24, r24
 422:	21 f0       	breq	.+8      	; 0x42c <updatePlayer+0x10>
 424:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <bluePins>
 428:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <newBlue>
 42c:	08 95       	ret

0000042e <updateShot>:
 42e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <newGreen>
 432:	88 23       	and	r24, r24
 434:	09 f4       	brne	.+2      	; 0x438 <updateShot+0xa>
 436:	6c c0       	rjmp	.+216    	; 0x510 <updateShot+0xe2>
 438:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <bluePins>
 43c:	80 95       	com	r24
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	59 f4       	brne	.+22     	; 0x458 <updateShot+0x2a>
 442:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <greenPins>
 446:	80 95       	com	r24
 448:	8f 3f       	cpi	r24, 0xFF	; 255
 44a:	09 f4       	brne	.+2      	; 0x44e <updateShot+0x20>
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	80 64       	ori	r24, 0x40	; 64
 450:	80 95       	com	r24
 452:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <greenPins>
 456:	5a c0       	rjmp	.+180    	; 0x50c <updateShot+0xde>
 458:	82 30       	cpi	r24, 0x02	; 2
 45a:	59 f4       	brne	.+22     	; 0x472 <updateShot+0x44>
 45c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <greenPins+0x1>
 460:	80 95       	com	r24
 462:	8f 3f       	cpi	r24, 0xFF	; 255
 464:	09 f4       	brne	.+2      	; 0x468 <updateShot+0x3a>
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	80 64       	ori	r24, 0x40	; 64
 46a:	80 95       	com	r24
 46c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <greenPins+0x1>
 470:	4d c0       	rjmp	.+154    	; 0x50c <updateShot+0xde>
 472:	84 30       	cpi	r24, 0x04	; 4
 474:	59 f4       	brne	.+22     	; 0x48c <updateShot+0x5e>
 476:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <greenPins+0x2>
 47a:	80 95       	com	r24
 47c:	8f 3f       	cpi	r24, 0xFF	; 255
 47e:	09 f4       	brne	.+2      	; 0x482 <updateShot+0x54>
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	80 64       	ori	r24, 0x40	; 64
 484:	80 95       	com	r24
 486:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <greenPins+0x2>
 48a:	40 c0       	rjmp	.+128    	; 0x50c <updateShot+0xde>
 48c:	88 30       	cpi	r24, 0x08	; 8
 48e:	59 f4       	brne	.+22     	; 0x4a6 <updateShot+0x78>
 490:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <greenPins+0x3>
 494:	80 95       	com	r24
 496:	8f 3f       	cpi	r24, 0xFF	; 255
 498:	09 f4       	brne	.+2      	; 0x49c <updateShot+0x6e>
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	80 64       	ori	r24, 0x40	; 64
 49e:	80 95       	com	r24
 4a0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <greenPins+0x3>
 4a4:	33 c0       	rjmp	.+102    	; 0x50c <updateShot+0xde>
 4a6:	80 31       	cpi	r24, 0x10	; 16
 4a8:	59 f4       	brne	.+22     	; 0x4c0 <updateShot+0x92>
 4aa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <greenPins+0x4>
 4ae:	80 95       	com	r24
 4b0:	8f 3f       	cpi	r24, 0xFF	; 255
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <updateShot+0x88>
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	80 64       	ori	r24, 0x40	; 64
 4b8:	80 95       	com	r24
 4ba:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <greenPins+0x4>
 4be:	26 c0       	rjmp	.+76     	; 0x50c <updateShot+0xde>
 4c0:	80 32       	cpi	r24, 0x20	; 32
 4c2:	59 f4       	brne	.+22     	; 0x4da <updateShot+0xac>
 4c4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <greenPins+0x5>
 4c8:	80 95       	com	r24
 4ca:	8f 3f       	cpi	r24, 0xFF	; 255
 4cc:	09 f4       	brne	.+2      	; 0x4d0 <updateShot+0xa2>
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	80 95       	com	r24
 4d4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <greenPins+0x5>
 4d8:	19 c0       	rjmp	.+50     	; 0x50c <updateShot+0xde>
 4da:	80 34       	cpi	r24, 0x40	; 64
 4dc:	59 f4       	brne	.+22     	; 0x4f4 <updateShot+0xc6>
 4de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <greenPins+0x6>
 4e2:	80 95       	com	r24
 4e4:	8f 3f       	cpi	r24, 0xFF	; 255
 4e6:	09 f4       	brne	.+2      	; 0x4ea <updateShot+0xbc>
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	80 64       	ori	r24, 0x40	; 64
 4ec:	80 95       	com	r24
 4ee:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <greenPins+0x6>
 4f2:	0c c0       	rjmp	.+24     	; 0x50c <updateShot+0xde>
 4f4:	80 38       	cpi	r24, 0x80	; 128
 4f6:	51 f4       	brne	.+20     	; 0x50c <updateShot+0xde>
 4f8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <greenPins+0x7>
 4fc:	80 95       	com	r24
 4fe:	8f 3f       	cpi	r24, 0xFF	; 255
 500:	09 f4       	brne	.+2      	; 0x504 <updateShot+0xd6>
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	80 64       	ori	r24, 0x40	; 64
 506:	80 95       	com	r24
 508:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <greenPins+0x7>
 50c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <newGreen>
 510:	08 95       	ret

00000512 <matrixUpdate>:
 512:	4f 92       	push	r4
 514:	5f 92       	push	r5
 516:	6f 92       	push	r6
 518:	7f 92       	push	r7
 51a:	8f 92       	push	r8
 51c:	9f 92       	push	r9
 51e:	af 92       	push	r10
 520:	bf 92       	push	r11
 522:	cf 92       	push	r12
 524:	df 92       	push	r13
 526:	ef 92       	push	r14
 528:	ff 92       	push	r15
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	80 e1       	ldi	r24, 0x10	; 16
 534:	8b b9       	out	0x0b, r24	; 11
 536:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <bluePins>
 53a:	c4 de       	rcall	.-632    	; 0x2c4 <updateShiftBlue>
 53c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 540:	88 23       	and	r24, r24
 542:	e1 f3       	breq	.-8      	; 0x53c <matrixUpdate+0x2a>
 544:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 548:	0f 2e       	mov	r0, r31
 54a:	f0 e1       	ldi	r31, 0x10	; 16
 54c:	cf 2e       	mov	r12, r31
 54e:	f1 e0       	ldi	r31, 0x01	; 1
 550:	df 2e       	mov	r13, r31
 552:	f0 2d       	mov	r31, r0
 554:	e1 2c       	mov	r14, r1
 556:	f1 2c       	mov	r15, r1
 558:	02 e0       	ldi	r16, 0x02	; 2
 55a:	10 e0       	ldi	r17, 0x00	; 0
 55c:	68 94       	set
 55e:	44 24       	eor	r4, r4
 560:	43 f8       	bld	r4, 3
 562:	aa 24       	eor	r10, r10
 564:	a3 94       	inc	r10
 566:	b1 2c       	mov	r11, r1
 568:	68 94       	set
 56a:	55 24       	eor	r5, r5
 56c:	52 f8       	bld	r5, 2
 56e:	68 94       	set
 570:	66 24       	eor	r6, r6
 572:	61 f8       	bld	r6, 1
 574:	77 24       	eor	r7, r7
 576:	73 94       	inc	r7
 578:	68 94       	set
 57a:	88 24       	eor	r8, r8
 57c:	87 f8       	bld	r8, 7
 57e:	68 94       	set
 580:	99 24       	eor	r9, r9
 582:	96 f8       	bld	r9, 6
 584:	d0 e2       	ldi	r29, 0x20	; 32
 586:	f6 01       	movw	r30, r12
 588:	c1 91       	ld	r28, Z+
 58a:	6f 01       	movw	r12, r30
 58c:	c0 95       	com	r28
 58e:	09 f4       	brne	.+2      	; 0x592 <matrixUpdate+0x80>
 590:	8c c0       	rjmp	.+280    	; 0x6aa <matrixUpdate+0x198>
 592:	c6 ff       	sbrs	r28, 6
 594:	12 c0       	rjmp	.+36     	; 0x5ba <matrixUpdate+0xa8>
 596:	db b9       	out	0x0b, r29	; 11
 598:	c5 01       	movw	r24, r10
 59a:	0e 2c       	mov	r0, r14
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <matrixUpdate+0x90>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	0a 94       	dec	r0
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <matrixUpdate+0x8c>
 5a6:	80 95       	com	r24
 5a8:	30 de       	rcall	.-928    	; 0x20a <updateShiftGreen>
 5aa:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 5ae:	88 23       	and	r24, r24
 5b0:	e1 f3       	breq	.-8      	; 0x5aa <matrixUpdate+0x98>
 5b2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 5b6:	0e 5f       	subi	r16, 0xFE	; 254
 5b8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ba:	c5 ff       	sbrs	r28, 5
 5bc:	12 c0       	rjmp	.+36     	; 0x5e2 <matrixUpdate+0xd0>
 5be:	9b b8       	out	0x0b, r9	; 11
 5c0:	c5 01       	movw	r24, r10
 5c2:	0e 2c       	mov	r0, r14
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <matrixUpdate+0xb8>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <matrixUpdate+0xb4>
 5ce:	80 95       	com	r24
 5d0:	1c de       	rcall	.-968    	; 0x20a <updateShiftGreen>
 5d2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 5d6:	88 23       	and	r24, r24
 5d8:	e1 f3       	breq	.-8      	; 0x5d2 <matrixUpdate+0xc0>
 5da:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 5de:	0e 5f       	subi	r16, 0xFE	; 254
 5e0:	1f 4f       	sbci	r17, 0xFF	; 255
 5e2:	c4 ff       	sbrs	r28, 4
 5e4:	12 c0       	rjmp	.+36     	; 0x60a <matrixUpdate+0xf8>
 5e6:	8b b8       	out	0x0b, r8	; 11
 5e8:	c5 01       	movw	r24, r10
 5ea:	0e 2c       	mov	r0, r14
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <matrixUpdate+0xe0>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	0a 94       	dec	r0
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <matrixUpdate+0xdc>
 5f6:	80 95       	com	r24
 5f8:	08 de       	rcall	.-1008   	; 0x20a <updateShiftGreen>
 5fa:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 5fe:	88 23       	and	r24, r24
 600:	e1 f3       	breq	.-8      	; 0x5fa <matrixUpdate+0xe8>
 602:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 606:	0e 5f       	subi	r16, 0xFE	; 254
 608:	1f 4f       	sbci	r17, 0xFF	; 255
 60a:	c3 ff       	sbrs	r28, 3
 60c:	12 c0       	rjmp	.+36     	; 0x632 <matrixUpdate+0x120>
 60e:	7b b8       	out	0x0b, r7	; 11
 610:	c5 01       	movw	r24, r10
 612:	0e 2c       	mov	r0, r14
 614:	02 c0       	rjmp	.+4      	; 0x61a <matrixUpdate+0x108>
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	0a 94       	dec	r0
 61c:	e2 f7       	brpl	.-8      	; 0x616 <matrixUpdate+0x104>
 61e:	80 95       	com	r24
 620:	f4 dd       	rcall	.-1048   	; 0x20a <updateShiftGreen>
 622:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 626:	88 23       	and	r24, r24
 628:	e1 f3       	breq	.-8      	; 0x622 <matrixUpdate+0x110>
 62a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 62e:	0e 5f       	subi	r16, 0xFE	; 254
 630:	1f 4f       	sbci	r17, 0xFF	; 255
 632:	c2 ff       	sbrs	r28, 2
 634:	12 c0       	rjmp	.+36     	; 0x65a <matrixUpdate+0x148>
 636:	6b b8       	out	0x0b, r6	; 11
 638:	c5 01       	movw	r24, r10
 63a:	0e 2c       	mov	r0, r14
 63c:	02 c0       	rjmp	.+4      	; 0x642 <matrixUpdate+0x130>
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	0a 94       	dec	r0
 644:	e2 f7       	brpl	.-8      	; 0x63e <matrixUpdate+0x12c>
 646:	80 95       	com	r24
 648:	e0 dd       	rcall	.-1088   	; 0x20a <updateShiftGreen>
 64a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 64e:	88 23       	and	r24, r24
 650:	e1 f3       	breq	.-8      	; 0x64a <matrixUpdate+0x138>
 652:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 656:	0e 5f       	subi	r16, 0xFE	; 254
 658:	1f 4f       	sbci	r17, 0xFF	; 255
 65a:	c1 ff       	sbrs	r28, 1
 65c:	12 c0       	rjmp	.+36     	; 0x682 <matrixUpdate+0x170>
 65e:	5b b8       	out	0x0b, r5	; 11
 660:	c5 01       	movw	r24, r10
 662:	0e 2c       	mov	r0, r14
 664:	02 c0       	rjmp	.+4      	; 0x66a <matrixUpdate+0x158>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	0a 94       	dec	r0
 66c:	e2 f7       	brpl	.-8      	; 0x666 <matrixUpdate+0x154>
 66e:	80 95       	com	r24
 670:	cc dd       	rcall	.-1128   	; 0x20a <updateShiftGreen>
 672:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 676:	88 23       	and	r24, r24
 678:	e1 f3       	breq	.-8      	; 0x672 <matrixUpdate+0x160>
 67a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 67e:	0e 5f       	subi	r16, 0xFE	; 254
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	c0 ff       	sbrs	r28, 0
 684:	12 c0       	rjmp	.+36     	; 0x6aa <matrixUpdate+0x198>
 686:	4b b8       	out	0x0b, r4	; 11
 688:	c5 01       	movw	r24, r10
 68a:	0e 2c       	mov	r0, r14
 68c:	02 c0       	rjmp	.+4      	; 0x692 <matrixUpdate+0x180>
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	0a 94       	dec	r0
 694:	e2 f7       	brpl	.-8      	; 0x68e <matrixUpdate+0x17c>
 696:	80 95       	com	r24
 698:	b8 dd       	rcall	.-1168   	; 0x20a <updateShiftGreen>
 69a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 69e:	88 23       	and	r24, r24
 6a0:	e1 f3       	breq	.-8      	; 0x69a <matrixUpdate+0x188>
 6a2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 6a6:	0e 5f       	subi	r16, 0xFE	; 254
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	ff ef       	ldi	r31, 0xFF	; 255
 6ac:	ef 1a       	sub	r14, r31
 6ae:	ff 0a       	sbc	r15, r31
 6b0:	88 e0       	ldi	r24, 0x08	; 8
 6b2:	e8 16       	cp	r14, r24
 6b4:	f1 04       	cpc	r15, r1
 6b6:	09 f0       	breq	.+2      	; 0x6ba <matrixUpdate+0x1a8>
 6b8:	66 cf       	rjmp	.-308    	; 0x586 <matrixUpdate+0x74>
 6ba:	0f 2e       	mov	r0, r31
 6bc:	f8 e0       	ldi	r31, 0x08	; 8
 6be:	cf 2e       	mov	r12, r31
 6c0:	f1 e0       	ldi	r31, 0x01	; 1
 6c2:	df 2e       	mov	r13, r31
 6c4:	f0 2d       	mov	r31, r0
 6c6:	e1 2c       	mov	r14, r1
 6c8:	f1 2c       	mov	r15, r1
 6ca:	68 94       	set
 6cc:	44 24       	eor	r4, r4
 6ce:	43 f8       	bld	r4, 3
 6d0:	aa 24       	eor	r10, r10
 6d2:	a3 94       	inc	r10
 6d4:	b1 2c       	mov	r11, r1
 6d6:	68 94       	set
 6d8:	55 24       	eor	r5, r5
 6da:	52 f8       	bld	r5, 2
 6dc:	68 94       	set
 6de:	66 24       	eor	r6, r6
 6e0:	61 f8       	bld	r6, 1
 6e2:	77 24       	eor	r7, r7
 6e4:	73 94       	inc	r7
 6e6:	68 94       	set
 6e8:	88 24       	eor	r8, r8
 6ea:	87 f8       	bld	r8, 7
 6ec:	68 94       	set
 6ee:	99 24       	eor	r9, r9
 6f0:	96 f8       	bld	r9, 6
 6f2:	d0 e2       	ldi	r29, 0x20	; 32
 6f4:	f6 01       	movw	r30, r12
 6f6:	c1 91       	ld	r28, Z+
 6f8:	6f 01       	movw	r12, r30
 6fa:	c0 95       	com	r28
 6fc:	09 f4       	brne	.+2      	; 0x700 <matrixUpdate+0x1ee>
 6fe:	8c c0       	rjmp	.+280    	; 0x818 <matrixUpdate+0x306>
 700:	c6 ff       	sbrs	r28, 6
 702:	12 c0       	rjmp	.+36     	; 0x728 <matrixUpdate+0x216>
 704:	db b9       	out	0x0b, r29	; 11
 706:	c5 01       	movw	r24, r10
 708:	0e 2c       	mov	r0, r14
 70a:	02 c0       	rjmp	.+4      	; 0x710 <matrixUpdate+0x1fe>
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	0a 94       	dec	r0
 712:	e2 f7       	brpl	.-8      	; 0x70c <matrixUpdate+0x1fa>
 714:	80 95       	com	r24
 716:	a8 dd       	rcall	.-1200   	; 0x268 <updateShiftRed>
 718:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 71c:	88 23       	and	r24, r24
 71e:	e1 f3       	breq	.-8      	; 0x718 <matrixUpdate+0x206>
 720:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 724:	0e 5f       	subi	r16, 0xFE	; 254
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	c5 ff       	sbrs	r28, 5
 72a:	12 c0       	rjmp	.+36     	; 0x750 <matrixUpdate+0x23e>
 72c:	9b b8       	out	0x0b, r9	; 11
 72e:	c5 01       	movw	r24, r10
 730:	0e 2c       	mov	r0, r14
 732:	02 c0       	rjmp	.+4      	; 0x738 <matrixUpdate+0x226>
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	0a 94       	dec	r0
 73a:	e2 f7       	brpl	.-8      	; 0x734 <matrixUpdate+0x222>
 73c:	80 95       	com	r24
 73e:	94 dd       	rcall	.-1240   	; 0x268 <updateShiftRed>
 740:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 744:	88 23       	and	r24, r24
 746:	e1 f3       	breq	.-8      	; 0x740 <matrixUpdate+0x22e>
 748:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 74c:	0e 5f       	subi	r16, 0xFE	; 254
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	c4 ff       	sbrs	r28, 4
 752:	12 c0       	rjmp	.+36     	; 0x778 <matrixUpdate+0x266>
 754:	8b b8       	out	0x0b, r8	; 11
 756:	c5 01       	movw	r24, r10
 758:	0e 2c       	mov	r0, r14
 75a:	02 c0       	rjmp	.+4      	; 0x760 <matrixUpdate+0x24e>
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	0a 94       	dec	r0
 762:	e2 f7       	brpl	.-8      	; 0x75c <matrixUpdate+0x24a>
 764:	80 95       	com	r24
 766:	80 dd       	rcall	.-1280   	; 0x268 <updateShiftRed>
 768:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 76c:	88 23       	and	r24, r24
 76e:	e1 f3       	breq	.-8      	; 0x768 <matrixUpdate+0x256>
 770:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 774:	0e 5f       	subi	r16, 0xFE	; 254
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	c3 ff       	sbrs	r28, 3
 77a:	12 c0       	rjmp	.+36     	; 0x7a0 <matrixUpdate+0x28e>
 77c:	7b b8       	out	0x0b, r7	; 11
 77e:	c5 01       	movw	r24, r10
 780:	0e 2c       	mov	r0, r14
 782:	02 c0       	rjmp	.+4      	; 0x788 <matrixUpdate+0x276>
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	0a 94       	dec	r0
 78a:	e2 f7       	brpl	.-8      	; 0x784 <matrixUpdate+0x272>
 78c:	80 95       	com	r24
 78e:	6c dd       	rcall	.-1320   	; 0x268 <updateShiftRed>
 790:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 794:	88 23       	and	r24, r24
 796:	e1 f3       	breq	.-8      	; 0x790 <matrixUpdate+0x27e>
 798:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 79c:	0e 5f       	subi	r16, 0xFE	; 254
 79e:	1f 4f       	sbci	r17, 0xFF	; 255
 7a0:	c2 ff       	sbrs	r28, 2
 7a2:	12 c0       	rjmp	.+36     	; 0x7c8 <matrixUpdate+0x2b6>
 7a4:	6b b8       	out	0x0b, r6	; 11
 7a6:	c5 01       	movw	r24, r10
 7a8:	0e 2c       	mov	r0, r14
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <matrixUpdate+0x29e>
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	0a 94       	dec	r0
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <matrixUpdate+0x29a>
 7b4:	80 95       	com	r24
 7b6:	58 dd       	rcall	.-1360   	; 0x268 <updateShiftRed>
 7b8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 7bc:	88 23       	and	r24, r24
 7be:	e1 f3       	breq	.-8      	; 0x7b8 <matrixUpdate+0x2a6>
 7c0:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 7c4:	0e 5f       	subi	r16, 0xFE	; 254
 7c6:	1f 4f       	sbci	r17, 0xFF	; 255
 7c8:	c1 ff       	sbrs	r28, 1
 7ca:	12 c0       	rjmp	.+36     	; 0x7f0 <matrixUpdate+0x2de>
 7cc:	5b b8       	out	0x0b, r5	; 11
 7ce:	c5 01       	movw	r24, r10
 7d0:	0e 2c       	mov	r0, r14
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <matrixUpdate+0x2c6>
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	0a 94       	dec	r0
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <matrixUpdate+0x2c2>
 7dc:	80 95       	com	r24
 7de:	44 dd       	rcall	.-1400   	; 0x268 <updateShiftRed>
 7e0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 7e4:	88 23       	and	r24, r24
 7e6:	e1 f3       	breq	.-8      	; 0x7e0 <matrixUpdate+0x2ce>
 7e8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 7ec:	0e 5f       	subi	r16, 0xFE	; 254
 7ee:	1f 4f       	sbci	r17, 0xFF	; 255
 7f0:	c0 ff       	sbrs	r28, 0
 7f2:	12 c0       	rjmp	.+36     	; 0x818 <matrixUpdate+0x306>
 7f4:	4b b8       	out	0x0b, r4	; 11
 7f6:	c5 01       	movw	r24, r10
 7f8:	0e 2c       	mov	r0, r14
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <matrixUpdate+0x2ee>
 7fc:	88 0f       	add	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	0a 94       	dec	r0
 802:	e2 f7       	brpl	.-8      	; 0x7fc <matrixUpdate+0x2ea>
 804:	80 95       	com	r24
 806:	30 dd       	rcall	.-1440   	; 0x268 <updateShiftRed>
 808:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 80c:	88 23       	and	r24, r24
 80e:	e1 f3       	breq	.-8      	; 0x808 <matrixUpdate+0x2f6>
 810:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
 814:	0e 5f       	subi	r16, 0xFE	; 254
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	ff ef       	ldi	r31, 0xFF	; 255
 81a:	ef 1a       	sub	r14, r31
 81c:	ff 0a       	sbc	r15, r31
 81e:	88 e0       	ldi	r24, 0x08	; 8
 820:	e8 16       	cp	r14, r24
 822:	f1 04       	cpc	r15, r1
 824:	09 f0       	breq	.+2      	; 0x828 <matrixUpdate+0x316>
 826:	66 cf       	rjmp	.-308    	; 0x6f4 <matrixUpdate+0x1e2>
 828:	c8 01       	movw	r24, r16
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	ff 90       	pop	r15
 834:	ef 90       	pop	r14
 836:	df 90       	pop	r13
 838:	cf 90       	pop	r12
 83a:	bf 90       	pop	r11
 83c:	af 90       	pop	r10
 83e:	9f 90       	pop	r9
 840:	8f 90       	pop	r8
 842:	7f 90       	pop	r7
 844:	6f 90       	pop	r6
 846:	5f 90       	pop	r5
 848:	4f 90       	pop	r4
 84a:	08 95       	ret

0000084c <startGame>:
 84c:	8f e7       	ldi	r24, 0x7F	; 127
 84e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <bluePins>
 852:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <newBlue>
 856:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <newGreen>
 85a:	e0 e1       	ldi	r30, 0x10	; 16
 85c:	f1 e0       	ldi	r31, 0x01	; 1
 85e:	a8 e0       	ldi	r26, 0x08	; 8
 860:	b1 e0       	ldi	r27, 0x01	; 1
 862:	28 e1       	ldi	r18, 0x18	; 24
 864:	31 e0       	ldi	r19, 0x01	; 1
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	81 93       	st	Z+, r24
 86a:	8d 93       	st	X+, r24
 86c:	e2 17       	cp	r30, r18
 86e:	f3 07       	cpc	r31, r19
 870:	d9 f7       	brne	.-10     	; 0x868 <startGame+0x1c>
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <loser>
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <previous>
 87e:	8f ef       	ldi	r24, 0xFF	; 255
 880:	c4 dc       	rcall	.-1656   	; 0x20a <updateShiftGreen>
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	1f dd       	rcall	.-1474   	; 0x2c4 <updateShiftBlue>
 886:	8f ef       	ldi	r24, 0xFF	; 255
 888:	ef dc       	rcall	.-1570   	; 0x268 <updateShiftRed>
 88a:	8a ef       	ldi	r24, 0xFA	; 250
 88c:	88 b9       	out	0x08, r24	; 8
 88e:	84 e1       	ldi	r24, 0x14	; 20
 890:	95 e0       	ldi	r25, 0x05	; 5
 892:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <updateTime+0x1>
 896:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <updateTime>
 89a:	08 95       	ret

0000089c <getUserInput>:
 89c:	8a ee       	ldi	r24, 0xEA	; 234
 89e:	82 b9       	out	0x02, r24	; 2
 8a0:	8a ec       	ldi	r24, 0xCA	; 202
 8a2:	82 b9       	out	0x02, r24	; 2
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	20 e0       	ldi	r18, 0x00	; 0
 8aa:	4a ec       	ldi	r20, 0xCA	; 202
 8ac:	3a ed       	ldi	r19, 0xDA	; 218
 8ae:	42 b9       	out	0x02, r20	; 2
 8b0:	06 99       	sbic	0x00, 6	; 0
 8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <getUserInput+0x24>
 8b4:	2f 5f       	subi	r18, 0xFF	; 255
 8b6:	08 2e       	mov	r0, r24
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <getUserInput+0x20>
 8ba:	22 0f       	add	r18, r18
 8bc:	0a 94       	dec	r0
 8be:	ea f7       	brpl	.-6      	; 0x8ba <getUserInput+0x1e>
 8c0:	32 b9       	out	0x02, r19	; 2
 8c2:	01 96       	adiw	r24, 0x01	; 1
 8c4:	88 30       	cpi	r24, 0x08	; 8
 8c6:	91 05       	cpc	r25, r1
 8c8:	91 f7       	brne	.-28     	; 0x8ae <getUserInput+0x12>
 8ca:	28 30       	cpi	r18, 0x08	; 8
 8cc:	11 f4       	brne	.+4      	; 0x8d2 <getUserInput+0x36>
 8ce:	be cf       	rjmp	.-132    	; 0x84c <startGame>
 8d0:	08 95       	ret
 8d2:	21 30       	cpi	r18, 0x01	; 1
 8d4:	21 f4       	brne	.+8      	; 0x8de <getUserInput+0x42>
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <newGreen>
 8dc:	28 c0       	rjmp	.+80     	; 0x92e <getUserInput+0x92>
 8de:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <newGreen>
 8e2:	20 31       	cpi	r18, 0x10	; 16
 8e4:	89 f4       	brne	.+34     	; 0x908 <getUserInput+0x6c>
 8e6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <bluePins>
 8ea:	80 95       	com	r24
 8ec:	88 0f       	add	r24, r24
 8ee:	19 f0       	breq	.+6      	; 0x8f6 <getUserInput+0x5a>
 8f0:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <newBlue>
 8f4:	03 c0       	rjmp	.+6      	; 0x8fc <getUserInput+0x60>
 8f6:	80 e8       	ldi	r24, 0x80	; 128
 8f8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <newBlue>
 8fc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <newBlue>
 900:	80 95       	com	r24
 902:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <newBlue>
 906:	08 95       	ret
 908:	20 32       	cpi	r18, 0x20	; 32
 90a:	89 f4       	brne	.+34     	; 0x92e <getUserInput+0x92>
 90c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <bluePins>
 910:	80 95       	com	r24
 912:	86 95       	lsr	r24
 914:	19 f0       	breq	.+6      	; 0x91c <getUserInput+0x80>
 916:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <newBlue>
 91a:	03 c0       	rjmp	.+6      	; 0x922 <getUserInput+0x86>
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <newBlue>
 922:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <newBlue>
 926:	80 95       	com	r24
 928:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <newBlue>
 92c:	08 95       	ret
 92e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <bluePins>
 932:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <newBlue>
 936:	08 95       	ret

00000938 <main>:
 938:	8f ef       	ldi	r24, 0xFF	; 255
 93a:	87 b9       	out	0x07, r24	; 7
 93c:	18 b8       	out	0x08, r1	; 8
 93e:	84 b9       	out	0x04, r24	; 4
 940:	15 b8       	out	0x05, r1	; 5
 942:	8a b9       	out	0x0a, r24	; 10
 944:	8d ed       	ldi	r24, 0xDD	; 221
 946:	8b b9       	out	0x0b, r24	; 11
 948:	8f e3       	ldi	r24, 0x3F	; 63
 94a:	81 b9       	out	0x01, r24	; 1
 94c:	80 ec       	ldi	r24, 0xC0	; 192
 94e:	82 b9       	out	0x02, r24	; 2
 950:	84 e0       	ldi	r24, 0x04	; 4
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	bd d0       	rcall	.+378    	; 0xad0 <srand>
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <loser>
 95c:	83 e0       	ldi	r24, 0x03	; 3
 95e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <previous>
 962:	62 e0       	ldi	r22, 0x02	; 2
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e dc       	rcall	.-2020   	; 0x188 <TimerSet>
 96c:	ad db       	rcall	.-2214   	; 0xc8 <TimerOn>
 96e:	8f ef       	ldi	r24, 0xFF	; 255
 970:	4c dc       	rcall	.-1896   	; 0x20a <updateShiftGreen>
 972:	8f ef       	ldi	r24, 0xFF	; 255
 974:	a7 dc       	rcall	.-1714   	; 0x2c4 <updateShiftBlue>
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	77 dc       	rcall	.-1810   	; 0x268 <updateShiftRed>
 97a:	00 e0       	ldi	r16, 0x00	; 0
 97c:	10 e0       	ldi	r17, 0x00	; 0
 97e:	c0 e0       	ldi	r28, 0x00	; 0
 980:	d0 e0       	ldi	r29, 0x00	; 0
 982:	03 c0       	rjmp	.+6      	; 0x98a <main+0x52>
 984:	8b df       	rcall	.-234    	; 0x89c <getUserInput>
 986:	11 dc       	rcall	.-2014   	; 0x1aa <startMenu>
 988:	c4 dd       	rcall	.-1144   	; 0x512 <matrixUpdate>
 98a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <loser>
 98e:	88 23       	and	r24, r24
 990:	c9 f3       	breq	.-14     	; 0x984 <main+0x4c>
 992:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <updateTime>
 996:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <updateTime+0x1>
 99a:	c8 17       	cp	r28, r24
 99c:	d9 07       	cpc	r29, r25
 99e:	cc f0       	brlt	.+50     	; 0x9d2 <main+0x9a>
 9a0:	89 3e       	cpi	r24, 0xE9	; 233
 9a2:	93 40       	sbci	r25, 0x03	; 3
 9a4:	14 f4       	brge	.+4      	; 0x9aa <main+0x72>
 9a6:	1f dd       	rcall	.-1474   	; 0x3e6 <spawnEnemy2>
 9a8:	01 c0       	rjmp	.+2      	; 0x9ac <main+0x74>
 9aa:	00 dd       	rcall	.-1536   	; 0x3ac <spawnEnemy>
 9ac:	bc dc       	rcall	.-1672   	; 0x326 <updateGame>
 9ae:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <updateTime>
 9b2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <updateTime+0x1>
 9b6:	89 3e       	cpi	r24, 0xE9	; 233
 9b8:	23 e0       	ldi	r18, 0x03	; 3
 9ba:	92 07       	cpc	r25, r18
 9bc:	44 f0       	brlt	.+16     	; 0x9ce <main+0x96>
 9be:	05 97       	sbiw	r24, 0x05	; 5
 9c0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <updateTime+0x1>
 9c4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <updateTime>
 9c8:	c0 e0       	ldi	r28, 0x00	; 0
 9ca:	d0 e0       	ldi	r29, 0x00	; 0
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <main+0x9a>
 9ce:	c0 e0       	ldi	r28, 0x00	; 0
 9d0:	d0 e0       	ldi	r29, 0x00	; 0
 9d2:	04 36       	cpi	r16, 0x64	; 100
 9d4:	11 05       	cpc	r17, r1
 9d6:	2c f0       	brlt	.+10     	; 0x9e2 <main+0xaa>
 9d8:	61 df       	rcall	.-318    	; 0x89c <getUserInput>
 9da:	29 dd       	rcall	.-1454   	; 0x42e <updateShot>
 9dc:	1f dd       	rcall	.-1474   	; 0x41c <updatePlayer>
 9de:	00 e0       	ldi	r16, 0x00	; 0
 9e0:	10 e0       	ldi	r17, 0x00	; 0
 9e2:	97 dd       	rcall	.-1234   	; 0x512 <matrixUpdate>
 9e4:	c8 0f       	add	r28, r24
 9e6:	d9 1f       	adc	r29, r25
 9e8:	08 0f       	add	r16, r24
 9ea:	19 1f       	adc	r17, r25
 9ec:	ce cf       	rjmp	.-100    	; 0x98a <main+0x52>

000009ee <__divmodhi4>:
 9ee:	97 fb       	bst	r25, 7
 9f0:	07 2e       	mov	r0, r23
 9f2:	16 f4       	brtc	.+4      	; 0x9f8 <__divmodhi4+0xa>
 9f4:	00 94       	com	r0
 9f6:	06 d0       	rcall	.+12     	; 0xa04 <__divmodhi4_neg1>
 9f8:	77 fd       	sbrc	r23, 7
 9fa:	08 d0       	rcall	.+16     	; 0xa0c <__divmodhi4_neg2>
 9fc:	0b d0       	rcall	.+22     	; 0xa14 <__udivmodhi4>
 9fe:	07 fc       	sbrc	r0, 7
 a00:	05 d0       	rcall	.+10     	; 0xa0c <__divmodhi4_neg2>
 a02:	3e f4       	brtc	.+14     	; 0xa12 <__divmodhi4_exit>

00000a04 <__divmodhi4_neg1>:
 a04:	90 95       	com	r25
 a06:	81 95       	neg	r24
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	08 95       	ret

00000a0c <__divmodhi4_neg2>:
 a0c:	70 95       	com	r23
 a0e:	61 95       	neg	r22
 a10:	7f 4f       	sbci	r23, 0xFF	; 255

00000a12 <__divmodhi4_exit>:
 a12:	08 95       	ret

00000a14 <__udivmodhi4>:
 a14:	aa 1b       	sub	r26, r26
 a16:	bb 1b       	sub	r27, r27
 a18:	51 e1       	ldi	r21, 0x11	; 17
 a1a:	07 c0       	rjmp	.+14     	; 0xa2a <__udivmodhi4_ep>

00000a1c <__udivmodhi4_loop>:
 a1c:	aa 1f       	adc	r26, r26
 a1e:	bb 1f       	adc	r27, r27
 a20:	a6 17       	cp	r26, r22
 a22:	b7 07       	cpc	r27, r23
 a24:	10 f0       	brcs	.+4      	; 0xa2a <__udivmodhi4_ep>
 a26:	a6 1b       	sub	r26, r22
 a28:	b7 0b       	sbc	r27, r23

00000a2a <__udivmodhi4_ep>:
 a2a:	88 1f       	adc	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	5a 95       	dec	r21
 a30:	a9 f7       	brne	.-22     	; 0xa1c <__udivmodhi4_loop>
 a32:	80 95       	com	r24
 a34:	90 95       	com	r25
 a36:	bc 01       	movw	r22, r24
 a38:	cd 01       	movw	r24, r26
 a3a:	08 95       	ret

00000a3c <do_rand>:
 a3c:	8f 92       	push	r8
 a3e:	9f 92       	push	r9
 a40:	af 92       	push	r10
 a42:	bf 92       	push	r11
 a44:	cf 92       	push	r12
 a46:	df 92       	push	r13
 a48:	ef 92       	push	r14
 a4a:	ff 92       	push	r15
 a4c:	cf 93       	push	r28
 a4e:	df 93       	push	r29
 a50:	ec 01       	movw	r28, r24
 a52:	68 81       	ld	r22, Y
 a54:	79 81       	ldd	r23, Y+1	; 0x01
 a56:	8a 81       	ldd	r24, Y+2	; 0x02
 a58:	9b 81       	ldd	r25, Y+3	; 0x03
 a5a:	61 15       	cp	r22, r1
 a5c:	71 05       	cpc	r23, r1
 a5e:	81 05       	cpc	r24, r1
 a60:	91 05       	cpc	r25, r1
 a62:	21 f4       	brne	.+8      	; 0xa6c <do_rand+0x30>
 a64:	64 e2       	ldi	r22, 0x24	; 36
 a66:	79 ed       	ldi	r23, 0xD9	; 217
 a68:	8b e5       	ldi	r24, 0x5B	; 91
 a6a:	97 e0       	ldi	r25, 0x07	; 7
 a6c:	2d e1       	ldi	r18, 0x1D	; 29
 a6e:	33 ef       	ldi	r19, 0xF3	; 243
 a70:	41 e0       	ldi	r20, 0x01	; 1
 a72:	50 e0       	ldi	r21, 0x00	; 0
 a74:	38 d0       	rcall	.+112    	; 0xae6 <__divmodsi4>
 a76:	49 01       	movw	r8, r18
 a78:	5a 01       	movw	r10, r20
 a7a:	9b 01       	movw	r18, r22
 a7c:	ac 01       	movw	r20, r24
 a7e:	a7 ea       	ldi	r26, 0xA7	; 167
 a80:	b1 e4       	ldi	r27, 0x41	; 65
 a82:	4d d0       	rcall	.+154    	; 0xb1e <__muluhisi3>
 a84:	6b 01       	movw	r12, r22
 a86:	7c 01       	movw	r14, r24
 a88:	ac ee       	ldi	r26, 0xEC	; 236
 a8a:	b4 ef       	ldi	r27, 0xF4	; 244
 a8c:	a5 01       	movw	r20, r10
 a8e:	94 01       	movw	r18, r8
 a90:	52 d0       	rcall	.+164    	; 0xb36 <__mulohisi3>
 a92:	dc 01       	movw	r26, r24
 a94:	cb 01       	movw	r24, r22
 a96:	8c 0d       	add	r24, r12
 a98:	9d 1d       	adc	r25, r13
 a9a:	ae 1d       	adc	r26, r14
 a9c:	bf 1d       	adc	r27, r15
 a9e:	b7 ff       	sbrs	r27, 7
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <do_rand+0x6c>
 aa2:	01 97       	sbiw	r24, 0x01	; 1
 aa4:	a1 09       	sbc	r26, r1
 aa6:	b0 48       	sbci	r27, 0x80	; 128
 aa8:	88 83       	st	Y, r24
 aaa:	99 83       	std	Y+1, r25	; 0x01
 aac:	aa 83       	std	Y+2, r26	; 0x02
 aae:	bb 83       	std	Y+3, r27	; 0x03
 ab0:	9f 77       	andi	r25, 0x7F	; 127
 ab2:	df 91       	pop	r29
 ab4:	cf 91       	pop	r28
 ab6:	ff 90       	pop	r15
 ab8:	ef 90       	pop	r14
 aba:	df 90       	pop	r13
 abc:	cf 90       	pop	r12
 abe:	bf 90       	pop	r11
 ac0:	af 90       	pop	r10
 ac2:	9f 90       	pop	r9
 ac4:	8f 90       	pop	r8
 ac6:	08 95       	ret

00000ac8 <rand_r>:
 ac8:	b9 cf       	rjmp	.-142    	; 0xa3c <do_rand>

00000aca <rand>:
 aca:	80 e0       	ldi	r24, 0x00	; 0
 acc:	91 e0       	ldi	r25, 0x01	; 1
 ace:	b6 cf       	rjmp	.-148    	; 0xa3c <do_rand>

00000ad0 <srand>:
 ad0:	a0 e0       	ldi	r26, 0x00	; 0
 ad2:	b0 e0       	ldi	r27, 0x00	; 0
 ad4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 ad8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 adc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 ae0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 ae4:	08 95       	ret

00000ae6 <__divmodsi4>:
 ae6:	05 2e       	mov	r0, r21
 ae8:	97 fb       	bst	r25, 7
 aea:	16 f4       	brtc	.+4      	; 0xaf0 <__divmodsi4+0xa>
 aec:	00 94       	com	r0
 aee:	0f d0       	rcall	.+30     	; 0xb0e <__negsi2>
 af0:	57 fd       	sbrc	r21, 7
 af2:	05 d0       	rcall	.+10     	; 0xafe <__divmodsi4_neg2>
 af4:	24 d0       	rcall	.+72     	; 0xb3e <__udivmodsi4>
 af6:	07 fc       	sbrc	r0, 7
 af8:	02 d0       	rcall	.+4      	; 0xafe <__divmodsi4_neg2>
 afa:	46 f4       	brtc	.+16     	; 0xb0c <__divmodsi4_exit>
 afc:	08 c0       	rjmp	.+16     	; 0xb0e <__negsi2>

00000afe <__divmodsi4_neg2>:
 afe:	50 95       	com	r21
 b00:	40 95       	com	r20
 b02:	30 95       	com	r19
 b04:	21 95       	neg	r18
 b06:	3f 4f       	sbci	r19, 0xFF	; 255
 b08:	4f 4f       	sbci	r20, 0xFF	; 255
 b0a:	5f 4f       	sbci	r21, 0xFF	; 255

00000b0c <__divmodsi4_exit>:
 b0c:	08 95       	ret

00000b0e <__negsi2>:
 b0e:	90 95       	com	r25
 b10:	80 95       	com	r24
 b12:	70 95       	com	r23
 b14:	61 95       	neg	r22
 b16:	7f 4f       	sbci	r23, 0xFF	; 255
 b18:	8f 4f       	sbci	r24, 0xFF	; 255
 b1a:	9f 4f       	sbci	r25, 0xFF	; 255
 b1c:	08 95       	ret

00000b1e <__muluhisi3>:
 b1e:	31 d0       	rcall	.+98     	; 0xb82 <__umulhisi3>
 b20:	a5 9f       	mul	r26, r21
 b22:	90 0d       	add	r25, r0
 b24:	b4 9f       	mul	r27, r20
 b26:	90 0d       	add	r25, r0
 b28:	a4 9f       	mul	r26, r20
 b2a:	80 0d       	add	r24, r0
 b2c:	91 1d       	adc	r25, r1
 b2e:	11 24       	eor	r1, r1
 b30:	08 95       	ret

00000b32 <__mulshisi3>:
 b32:	b7 ff       	sbrs	r27, 7
 b34:	f4 cf       	rjmp	.-24     	; 0xb1e <__muluhisi3>

00000b36 <__mulohisi3>:
 b36:	f3 df       	rcall	.-26     	; 0xb1e <__muluhisi3>
 b38:	82 1b       	sub	r24, r18
 b3a:	93 0b       	sbc	r25, r19
 b3c:	08 95       	ret

00000b3e <__udivmodsi4>:
 b3e:	a1 e2       	ldi	r26, 0x21	; 33
 b40:	1a 2e       	mov	r1, r26
 b42:	aa 1b       	sub	r26, r26
 b44:	bb 1b       	sub	r27, r27
 b46:	fd 01       	movw	r30, r26
 b48:	0d c0       	rjmp	.+26     	; 0xb64 <__udivmodsi4_ep>

00000b4a <__udivmodsi4_loop>:
 b4a:	aa 1f       	adc	r26, r26
 b4c:	bb 1f       	adc	r27, r27
 b4e:	ee 1f       	adc	r30, r30
 b50:	ff 1f       	adc	r31, r31
 b52:	a2 17       	cp	r26, r18
 b54:	b3 07       	cpc	r27, r19
 b56:	e4 07       	cpc	r30, r20
 b58:	f5 07       	cpc	r31, r21
 b5a:	20 f0       	brcs	.+8      	; 0xb64 <__udivmodsi4_ep>
 b5c:	a2 1b       	sub	r26, r18
 b5e:	b3 0b       	sbc	r27, r19
 b60:	e4 0b       	sbc	r30, r20
 b62:	f5 0b       	sbc	r31, r21

00000b64 <__udivmodsi4_ep>:
 b64:	66 1f       	adc	r22, r22
 b66:	77 1f       	adc	r23, r23
 b68:	88 1f       	adc	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	1a 94       	dec	r1
 b6e:	69 f7       	brne	.-38     	; 0xb4a <__udivmodsi4_loop>
 b70:	60 95       	com	r22
 b72:	70 95       	com	r23
 b74:	80 95       	com	r24
 b76:	90 95       	com	r25
 b78:	9b 01       	movw	r18, r22
 b7a:	ac 01       	movw	r20, r24
 b7c:	bd 01       	movw	r22, r26
 b7e:	cf 01       	movw	r24, r30
 b80:	08 95       	ret

00000b82 <__umulhisi3>:
 b82:	a2 9f       	mul	r26, r18
 b84:	b0 01       	movw	r22, r0
 b86:	b3 9f       	mul	r27, r19
 b88:	c0 01       	movw	r24, r0
 b8a:	a3 9f       	mul	r26, r19
 b8c:	70 0d       	add	r23, r0
 b8e:	81 1d       	adc	r24, r1
 b90:	11 24       	eor	r1, r1
 b92:	91 1d       	adc	r25, r1
 b94:	b2 9f       	mul	r27, r18
 b96:	70 0d       	add	r23, r0
 b98:	81 1d       	adc	r24, r1
 b9a:	11 24       	eor	r1, r1
 b9c:	91 1d       	adc	r25, r1
 b9e:	08 95       	ret

00000ba0 <_exit>:
 ba0:	f8 94       	cli

00000ba2 <__stop_program>:
 ba2:	ff cf       	rjmp	.-2      	; 0xba2 <__stop_program>
